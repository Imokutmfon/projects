{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91717,"databundleVersionId":12184666,"sourceType":"competition"}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\n\ntrain_dir = \"/kaggle/input/playground-series-s5e6/train.csv\"\ntest_dir = \"/kaggle/input/playground-series-s5e6/test.csv\"\nsample_submission_dir = \"/kaggle/input/playground-series-s5e6/sample_submission.csv\"\n\ndef load_data(directory):\n    data = pd.read_csv(directory)\n    return data\n\ndef split_data(data):\n    data = data.dropna()\n    X = data.drop(columns=['id', 'Fertilizer Name'])\n    y = data['Fertilizer Name']\n    return X, y\n\ndef preprocess_data(X):\n    # Extract numerical columns and categorical columns\n    num_cols = X.select_dtypes(include=np.number).columns.tolist()\n    cat_cols = X.select_dtypes(include='object').columns.tolist()\n    num_features = X[num_cols]\n    num_features_dict = {key: value.to_numpy()[:, tf.newaxis] for key, value in dict(num_features).items()}\n    # Preprocessing model \n    inputs={}\n    for name, column in X.items():\n        if type(column[0]) == str:\n            dtype = tf.string\n        elif name in cat_cols:\n            dtype = tf.int64\n        else:\n            dtype = tf.float32\n        inputs[name] = tf.keras.Input(shape=(1,), name=name, dtype=dtype)\n    # Normalize numeric inputs\n    normalizer = tf.keras.layers.Normalization(axis=-1)\n    normalizer.adapt(np.concatenate([value for key, value in sorted(num_features_dict.items())]))\n    num_inputs=[]\n    for name in num_cols:\n        num_inputs.append(inputs[name])\n    num_inputs = tf.keras.layers.Concatenate(axis=-1)(num_inputs)\n    num_normalized = normalizer(num_inputs)\n    preprocessed=[]\n    preprocessed.append(num_normalized)\n    # Categorical features get encoded to one hot encodings\n    for name in cat_cols:\n        vocab = sorted(set(X[name]))\n        print(f'name: {name}')\n        print(f\"vocab: {vocab}\\n\")\n        if type(vocab[0]) is str:\n            lookup = tf.keras.layers.StringLookup(vocabulary=vocab, output_mode='one_hot')\n        else:\n            lookup = tf.keras.layers.IntegerLookup(vocabulary=vocab, output_mode='one_hot')\n        x = inputs[name]\n        x = lookup(x)\n        preprocessed.append(x)\n    preprocessed_result = tf.keras.layers.Concatenate(axis=1)(preprocessed)\n    return inputs, preprocessed_result\n\n\nif __name__ == '__main__':\n    train_data = load_data(train_dir)\n    test_data = load_data(test_dir)\n    sample_submission = load_data(sample_submission_dir)\n    X_train, y_train = split_data(train_data)\n    inputs, preprocessed_result= preprocess_data(X_train)\n    preprocessor = tf.keras.Model(inputs, preprocessed_result)\n    tf.keras.utils.plot_model(preprocessor, rankdir=\"LR\", show_shapes=True,  show_layer_names=True, to_file=\"preprocessor.png\")\n    ","metadata":{"_uuid":"8154b162-58c5-4da5-8a02-a8aafcb294de","_cell_guid":"83e5e502-e4c3-4adf-b80f-3e7e6b07c64f","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-06-27T06:27:00.299391Z","iopub.execute_input":"2025-06-27T06:27:00.299698Z","iopub.status.idle":"2025-06-27T06:27:21.211679Z","shell.execute_reply.started":"2025-06-27T06:27:00.299677Z","shell.execute_reply":"2025-06-27T06:27:21.210523Z"}},"outputs":[{"name":"stderr","text":"2025-06-27 06:27:03.709720: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1751005623.972226      35 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1751005624.048136      35 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n2025-06-27 06:27:20.429348: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n","output_type":"stream"},{"name":"stdout","text":"name: Soil Type\nvocab: ['Black', 'Clayey', 'Loamy', 'Red', 'Sandy']\n\nname: Crop Type\nvocab: ['Barley', 'Cotton', 'Ground Nuts', 'Maize', 'Millets', 'Oil seeds', 'Paddy', 'Pulses', 'Sugarcane', 'Tobacco', 'Wheat']\n\n","output_type":"stream"}],"execution_count":2}]}